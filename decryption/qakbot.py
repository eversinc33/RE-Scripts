xor_key = bytes([
  0x5A, 0x6A, 0x74, 0xEA, 0x9B, 0x8E, 0xBD, 0xE0, 0x76, 0xC4, 
  0xC2, 0x83, 0x34, 0xB9, 0x9A, 0x42, 0x86, 0x41, 0x69, 0xA2, 
  0xC9, 0x8D, 0x3F, 0x31, 0xDE, 0xA5, 0x93, 0x1F, 0x71, 0x1D, 
  0x87, 0x3D, 0x81, 0xCB, 0xC4, 0x31, 0x61, 0x95, 0xEF, 0x84, 
  0x3F, 0xC0, 0x32, 0x11, 0x20, 0x6D, 0x26, 0x27, 0xAC, 0xBD, 
  0x92, 0x89, 0x9E, 0x2C, 0x76, 0x43, 0x0A, 0xF6, 0x22, 0x62, 
  0x77, 0x6C, 0x83, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xDF, 0xB0, 0x08, 0x99, 0x80, 0x00, 0x00, 0x00, 
  0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x0C, 0xC7, 0x45, 0xF4, 0x61, 
  0x61, 0x61, 0x61, 0xC7, 0x45, 0xF8, 0x62, 0x62, 0x62, 0x62, 
  0xC7, 0x45, 0xFC, 0x63, 0x63, 0x63, 0x63, 0x8B, 0x45, 0xF8, 
  0x50, 0xFF, 0x55, 0xF4, 0x8B, 0x4D, 0x0C, 0x51, 0x8B, 0x55, 
  0x08, 0x52, 0xFF, 0x55, 0xFC, 0x8B, 0xE5, 0x5D
])

def decrypt_string_at_offset(encrypted_path: str, offset: int) -> str:
    with open(encrypted_path, 'rb') as f:
        encrypted = f.read()

    end = offset
    while end < min(len(encrypted), 14068) and encrypted[end] != xor_key[end & 0x3F]:
        end += 1

    size = end - offset
    decrypted = bytearray(size)
    for i in range(size):
        decrypted[i] = encrypted[offset + i] ^ xor_key[(offset + i) & 0x3F]

    return decrypted.decode('utf-8', errors='ignore')

def decrypt_blob(encrypted_path: str) -> bytes:
    with open(encrypted_path, 'rb') as f:
        encrypted = f.read()

    offset = 0

    size = 14068
    decrypted = bytearray(size)
    for i in range(size):
        decrypted[i] = encrypted[offset + i] ^ xor_key[(offset + i) & 0x3F]
        if encrypted[offset + i] == xor_key[offset + i & 0x3F]:
            decrypted[i] = ord('\n')

    return bytes(decrypted)


if __name__ == "__main__":
    #print(decrypt_string_at_offset("C:\\Users\\malwa\\Desktop\\ecrypted_config.bin", 0x28E1))
    decrypted = decrypt_blob("C:\\Users\\malwa\\Desktop\\ecrypted_config.bin")
    with open("decrypted_config.bin", "wb") as f:
        f.write(decrypted)